// ==========================
// üìò CLOSURE TUTORIAL & PRACTICE
// ==========================
//
// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: 
// - ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
// - ‡∏ó‡∏≥‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
// - ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠
//
// ‚ú® ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à closure 100%

// -----------------------------------------------------
// PART 1: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Closure
// -----------------------------------------------------
//
// Closure = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà "‡∏à‡∏≥" ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å scope ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ
//


// üö© Example 1:
function outerExample() {
  let message = "Hello from outer!";

  function innerExample() {
    console.log(message); // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å outer
  }

  return innerExample;
}

const myFunc = outerExample();
myFunc(); // ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏î‡∏π ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£?

// -----------------------------------------------------
// üìù Exercise 1:
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô makeGreeting ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ (name)
// ‡πÅ‡∏•‡πâ‡∏ß return ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‡∏à‡∏∞ console.log("Hello, <name>")

function makeGreeting(name) {
    function greet() {
        console.log("Hello, " + name);
    }
    return greet;
}

const greetA = makeGreeting("Alice");
greetA(); // üëâ ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á "Hello, Alice"

// -----------------------------------------------------
// PART 2: Closure + Counter
// -----------------------------------------------------
//
// Closure ‡∏°‡∏±‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡πÄ‡∏Å‡πá‡∏ö state"
// ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ counter ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡πÅ‡∏°‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô outer ‡∏à‡∏∞‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
//

// üö© Example 2:

// -----------------------------------------------------
// üìù Exercise 2:
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô makeCounter ‡∏ó‡∏µ‡πà return ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô 2 ‡∏ï‡∏±‡∏ß
// - increment() ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ count
// - decrement() ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ count
// ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á count ‡∏ï‡πâ‡∏≠‡∏á "‡∏à‡∏≥" ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ closure
//
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const counter = makeCounter();
// counter.increment(); // 1
// counter.increment(); // 2
// counter.decrement(); // 1


function makeCounter() {
  let value = 0;
  return function () {
    value ++
    return value;
  }
}
const dataKeeper = makeCounter();
console.log(dataKeeper());
console.log(dataKeeper());
console.log(dataKeeper());


// -----------------------------------------------------
// PART 3: Parameterized Closure
// -----------------------------------------------------
//
// Closure ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ parameter" ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
//

// üö© Example 3:
function multiplier(factor) {
  return function (x) {
    return x * factor;
  };
}

const double = multiplier(2);
console.log(double(5)); // 10
console.log(double(5)); // 10

// -----------------------------------------------------
// üìù Exercise 3:
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô power(exponent) ‡∏ó‡∏µ‡πà return ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô:
// const square = power(2);
// square(5) üëâ 25
// const cube = power(3);
// cube(2) üëâ 8

function power(exponent) {
  return function (power) {
    return Math.pow(power,exponent)
  };
}

const square = power(2);
console.log(square(5), "This is Power !!");


// -----------------------------------------------------
// PART 4: Practical Usage
// -----------------------------------------------------
//
// Closure ‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (data privacy)
//

// üö© Example 4:
function bankAccountExample(initialBalance) {
  let balance = initialBalance;

  return {
    deposit: function (amount) {
      balance += amount;
      return balance;
    },
    withdraw: function (amount) {
      balance -= amount;
      return balance;
    },
    getBalance: function () {
      return balance;
    }
  };
}

const myAcc = bankAccountExample(100);
console.log(myAcc.deposit(50));   // 150
console.log(myAcc.withdraw(30));  // 120
console.log(myAcc.getBalance());  // 120


// -----------------------------------------------------
// üìù Exercise 4 (Challenge):
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createSecret(secret)
// ‡∏ó‡∏µ‡πà return object 2 method:
// - getSecret(password) => ‡∏ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏π‡∏Å ‡πÉ‡∏´‡πâ return secret
// - changeSecret(password, newSecret) => ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ secret ‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏π‡∏Å
//
// Hint: ‡πÉ‡∏ä‡πâ closure ‡πÄ‡∏Å‡πá‡∏ö secret ‡πÅ‡∏•‡∏∞ password

function createSecret(secret, password) {
  let psw = password
  let sec = secret
  return {
    getSecret : function (pass) {
      if (pass === psw) {
        return sec
      }
      else{
        return "Access Denied"
      }
    },
    changeSecret : function (pass,newSecret) {
        if (pass === psw) {
          sec = newSecret
        }
    } 
  }
}

const locker = createSecret("MyGold", "1234");
console.log(locker.getSecret("wrong")) // "Access Denied");
console.log(locker.getSecret("1234"))  // "MyGold");
locker.changeSecret("1234", "Diamond");
console.log(locker.getSecret("1234")); // "Diamond"



// -----------------------------------------------------
// üéØ Final Boss Exercise (Super Challenge):
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô once(fn) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fn ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
// ‡πÅ‡∏•‡πâ‡∏ß return ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2 ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (return undefined)
//
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// const helloOnce = once(() => console.log("Hello"));
// helloOnce(); // "Hello"
// helloOnce(); // (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£)

function once(fn) {
  let called = false
  return function () {
    if (!called) {
      called = true
      return fn()
    }
  }
}

const helloOnce = once(() => console.log("Hello"));
helloOnce(); // "Hello"
helloOnce(); // (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£)